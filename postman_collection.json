{
	"info": {
		"_postman_id": "3b021b9f-7ffe-44ae-b2e8-31dd13624273",
		"name": "Rest API tests",
		"description": "A collection of REST API tests for the backend.\n\nBefore running the tests, make sure that the database is empty, as the tests might give the incorrect results if there is anything in the database prior to running the tests.  \nTo do this, go to the backend container shell and write \\`python manage.py flush --no-input\\`\n\nBe aware that the tests need to be run in order, so always run the User app tests -folder before the Friends app tests -folder, for example.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34213706"
	},
	"item": [
		{
			"name": "User app tests",
			"item": [
				{
					"name": "GET users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"No users created yet\", () => {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property('users').that.is.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new user without password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a password field with error message\", function () {\r",
									"    pm.response.to.have.status(400); // Verify status code\r",
									"    pm.response.to.be.json; // Verify response is in JSON format\r",
									"    pm.response.to.have.jsonBody({\r",
									"        password: [\"This field is required.\"]\r",
									"    }); // Verify response body\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"tester100\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new user without username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a password field with error message\", function () {\r",
									"    pm.response.to.have.status(400); // Verify status code\r",
									"    pm.response.to.be.json; // Verify response is in JSON format\r",
									"    pm.response.to.have.jsonBody({\r",
									"        password: [\"This field is required.\"]\r",
									"    }); // Verify response body\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"tester100\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new user (id=1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"pm.test(\"Response contains a User with username as 'tester'\", function () {\r",
									"    pm.expect(responseBody).to.have.property('username').that.is.equal('tester');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"tester\",\r\n    \"password\" : \"testerspassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new user with same name (invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql('{\"username\":[\"user with this username already exists.\"]}');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"tester\",\r\n    \"password\" : \"testerspassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'users' property with a list of JSON objects\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property('users').that.is.an('array');\r",
									"    // Check if each object in the 'users' array has at least one element\r",
									"    responseBody.users.forEach(function(user) {\r",
									"        pm.expect(Object.keys(user).length).to.be.at.least(1);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"djaguschiii\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is an object with id, username and is_online properties\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('id', 'username', 'is_online');",
									"});",
									"pm.test(\"Response body is { 'id': 1, 'username': 'tester', 'is_online': false }\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.eql({ id: 1, username: 'tester', 'is_online': false });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"djaguschiii\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/1",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST user 1 invalid login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Body contains the message 'Invalid username or password'\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.equal(\"Invalid username or password\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"tester\",\n    \"password\": \"invalidpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST user 1 valid login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.expect(pm.response.code).to.equal(202);",
									"});",
									"",
									"// Test to check if the response contains the 'csrftoken' and 'sessionid' cookies",
									"pm.test(\"Response contains 'csrftoken' and 'sessionid' cookies\", function() {",
									"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
									"    var setCookieHeaders = pm.response.headers.all().filter(header => header.key === 'Set-Cookie');",
									"    var cookieValues = setCookieHeaders.map(header => header.value);",
									"    pm.expect(cookieValues.join()).to.include('csrftoken').and.to.include('sessionid');",
									"});",
									"",
									"var xsrfCookie = postman.getResponseCookie(\"csrftoken\");",
									"pm.collectionVariables.set(\"user1_csrftoken\", xsrfCookie.value);",
									"var sessionIdCookie = postman.getResponseCookie(\"sessionid\");",
									"pm.collectionVariables.set(\"user1_sessionid\", sessionIdCookie.value);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"tester\",\n    \"password\": \"testerspassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update user 1 username (valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check the response status code",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Test to check the response body structure and values",
									"pm.test(\"Response body matches the current values\", function () {",
									"  var responseJSON = pm.response.json();",
									"  pm.expect(responseJSON).to.deep.include({ id: 1, username: \"newtester\", is_online: true });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-csrftoken",
								"value": "{{user1_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user1_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newtester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/1",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is null\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.be.null;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-csrftoken",
								"value": "{{user1_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user1_sessionid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/users/1",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new admin (id=2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"pm.test(\"Response contains a User with username as 'admin'\", function () {",
									"    pm.expect(responseBody).to.have.property('username').that.is.equal('admin');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"pass\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/admins/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"admins",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder is a collection of requests with tests for the backend's User application.  \n  \nBe aware that the tests have to be run at the start of the program because if you make your own changes to the backend database it will cause issues for some of the tests!"
		},
		{
			"name": "Friends app tests",
			"item": [
				{
					"name": "POST new user (id=3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"pm.test(\"Response contains a User with username as 'user3'\", function () {",
									"    pm.expect(responseBody).to.have.property('username').that.is.equal('user3');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user3\",\n    \"password\": \"pass3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new user (id=4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"pm.test(\"Response contains a User with username as 'user4'\", function () {",
									"    pm.expect(responseBody).to.have.property('username').that.is.equal('user4');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user4\",\n    \"password\": \"pass4\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Friends (invalid, not logged in)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {",
									"  pm.response.to.have.status(403);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new Friends for 3 - 4 (invalid, not logged in)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {",
									"  pm.response.to.have.status(403);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 3,\n    \"friend_id\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST login as user 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.expect(pm.response.code).to.equal(202);",
									"});",
									"",
									"// Test to check if the response contains the 'csrftoken' and 'sessionid' cookies",
									"pm.test(\"Response contains 'csrftoken' and 'sessionid' cookies\", function() {",
									"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
									"    var setCookieHeaders = pm.response.headers.all().filter(header => header.key === 'Set-Cookie');",
									"    var cookieValues = setCookieHeaders.map(header => header.value);",
									"    pm.expect(cookieValues.join()).to.include('csrftoken').and.to.include('sessionid');",
									"});",
									"",
									"var xsrfCookie = postman.getResponseCookie(\"csrftoken\");",
									"pm.collectionVariables.set(\"user3_csrftoken\", xsrfCookie.value);",
									"var sessionIdCookie = postman.getResponseCookie(\"sessionid\");",
									"pm.collectionVariables.set(\"user3_sessionid\", sessionIdCookie.value);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user3\",\n    \"password\": \"pass3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new Friends for 3 - 4 (valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"pm.test(\"Response body has correct values\", function () {",
									"    pm.expect(pm.response.json()).to.eql({\"id\":1,\"user_id\":3,\"friend_id\":4});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "{{user3_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user3_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 3,\n    \"friend_id\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new Friends for 4 - 3 (invalid, not logged in as 4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "{{user3_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user3_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 4,\n    \"friend_id\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Friends (valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Friends response is empty\", function () {",
									"    pm.expect(pm.response.json()).to.eql({\"friends\":[]});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "{{user3_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user3_sessionid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET friendship 1 (valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body has correct values\", function () {",
									"    pm.expect(pm.response.json()).to.eql({\"id\":1,\"user_id\":3,\"friend_id\":4});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/friends/1",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET friendship 2 (invalid, doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body contains the word 'message'\", function () {",
									"    pm.expect(pm.response.text()).to.include('message');",
									"});",
									"",
									"// delete cookies to get next request to work",
									"pm.cookies.jar().unset(\"127.0.0.1\", \"csrftoken\");",
									"pm.cookies.jar().unset(\"127.0.0.1\", \"sessionid\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/friends/2",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST login as user 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.expect(pm.response.code).to.equal(202);",
									"});",
									"",
									"var xsrfCookie = postman.getResponseCookie(\"csrftoken\");",
									"pm.collectionVariables.set(\"user4_csrftoken\", xsrfCookie.value);",
									"var sessionIdCookie = postman.getResponseCookie(\"sessionid\");",
									"pm.collectionVariables.set(\"user4_sessionid\", sessionIdCookie.value);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear('localhost', function (error) {",
									"  console.log(\"error when clearing cookie jar\");",
									"  console.log(error);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "{{user4_csrftoken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "sessionid",
								"value": "{{user4_sessionid}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user4\",\n    \"password\": \"pass4\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new Friends for 4 - 3 (valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"pm.test(\"Response body has correct values\", function () {",
									"    pm.expect(pm.response.json()).to.eql({\"id\":2,\"user_id\":4,\"friend_id\":3});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "{{user4_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user4_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 4,\n    \"friend_id\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Friends as 4 (user 3 friendship)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body has 3 as friend\", function () {",
									"    pm.expect(pm.response.json()).to.eql({\"friends\":[{ id: 3, username: \"user3\", is_online: true }]});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "{{user4_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user4_sessionid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE friendship 4 - 3 (valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});",
									"",
									"pm.test(\"Response body is null\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.be.null;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "{{user4_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user4_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 4,\n    \"friend_id\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder is a collection of requests with tests for the backend's Friends application.\n\nBe aware that the tests have to be run at the start of the program because if you make your own changes to the backend database it will cause issues for some of the tests!  \n  \nRun this folder's tests after running the User app folder's tests!"
		},
		{
			"name": "Tokens, Match tests",
			"item": [
				{
					"name": "create host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear('localhost', function (error) {",
									"  console.log(\"error when clearing cookie jar\");",
									"  console.log(error);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"host\",\n    \"password\": \"host\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"guest\",\n    \"password\": \"guest\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "login host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"var xsrfCookie = postman.getResponseCookie(\"csrftoken\");",
									"pm.collectionVariables.set(\"host_csrftoken\", xsrfCookie.value);",
									"var sessionIdCookie = postman.getResponseCookie(\"sessionid\");",
									"pm.collectionVariables.set(\"host_sessionid\", sessionIdCookie.value);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear('localhost', function (error) {",
									"  console.log(\"error when clearing cookie jar\");",
									"  console.log(error);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"host\",\n    \"password\": \"host\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "launch test match",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrftoken",
								"value": "{{host_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{host_sessionid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/start-test-match/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"start-test-match",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "authenticate guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store the token value in a collection variable",
									"pm.test(\"Store the token value in a collection variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"guest_token\", jsonData.token.token);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-csrftoken",
								"value": "{{host_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{host_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"guest\",\n    \"password\": \"guest\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authenticate-guest-user-for-single-match/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authenticate-guest-user-for-single-match",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "deactivate guest token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-csrftoken",
								"value": "{{host_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{host_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{guest_token}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/deactivate-match-token/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"deactivate-match-token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "launch single match (invalid, token not active)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-csrftoken",
								"value": "{{host_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{host_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{guest_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/start-single-match/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"start-single-match",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "authenticate guest again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store the token value in a collection variable",
									"pm.test(\"Store the token value in a collection variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"guest_token\", jsonData.token.token);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-csrftoken",
								"value": "{{host_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{host_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"guest\",\n    \"password\": \"guest\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authenticate-guest-user-for-single-match/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authenticate-guest-user-for-single-match",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "launch single match (valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-csrftoken",
								"value": "{{host_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{host_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{guest_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/start-single-match/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"start-single-match",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder is a collection of requests with tests for the backend's Tokens and Match features.\n\nBe aware that the tests have to be run at the start of the program because if you make your own changes to the backend database it will cause issues for some of the tests!"
		},
		{
			"name": "individual requests",
			"item": [
				{
					"name": "GET users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create 123",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"123\",\n    \"password\": \"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create guest2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"guest2\",\n    \"password\": \"guest2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "login 123",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var xsrfCookie = postman.getResponseCookie(\"csrftoken\");",
									"pm.collectionVariables.set(\"user123_csrftoken\", xsrfCookie.value);",
									"var sessionIdCookie = postman.getResponseCookie(\"sessionid\");",
									"pm.collectionVariables.set(\"user123_sessionid\", sessionIdCookie.value);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear('localhost', function (error) {",
									"  console.log(\"error when clearing cookie jar\");",
									"  console.log(error);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"123\",\n    \"password\": \"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "view 123 friends",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var xsrfCookie = postman.getResponseCookie(\"csrftoken\");",
									"pm.collectionVariables.set(\"user123_csrftoken\", xsrfCookie.value);",
									"var sessionIdCookie = postman.getResponseCookie(\"sessionid\");",
									"pm.collectionVariables.set(\"user123_sessionid\", sessionIdCookie.value);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "{{user123_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user123_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"123\",\n    \"password\": \"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "authenticate guest2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store the token value in a collection variable",
									"pm.test(\"Store the token value in a collection variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"guest2_token\", jsonData.token.token);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-csrftoken",
								"value": "{{user123_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user123_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"guest2\",\n    \"password\": \"guest2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authenticate-guest-user-for-single-match/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authenticate-guest-user-for-single-match",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "deactivate guest2 token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-csrftoken",
								"value": "{{user123_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user123_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{guest2_token}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/deactivate-match-token/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"deactivate-match-token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "launch single match against guest2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-csrftoken",
								"value": "{{user123_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user123_sessionid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{guest2_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/start-single-match/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"start-single-match",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "launch test match",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrftoken",
								"value": "{{user123_csrftoken}}",
								"type": "text"
							},
							{
								"key": "sessionid",
								"value": "{{user123_sessionid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/start-test-match/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"start-test-match",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "These are individual requests without any tests."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseurl",
			"value": "localhost:8080",
			"type": "string"
		},
		{
			"key": "user1_csrftoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "user1_sessionid",
			"value": "",
			"type": "string"
		},
		{
			"key": "user3_csrftoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "user3_sessionid",
			"value": "",
			"type": "string"
		},
		{
			"key": "user4_csrftoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "user4_sessionid",
			"value": "",
			"type": "string"
		},
		{
			"key": "host_csrftoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "host_sessionid",
			"value": "",
			"type": "string"
		},
		{
			"key": "guest_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user123_csrftoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "user123_sessionid",
			"value": "",
			"type": "string"
		},
		{
			"key": "guest2_token",
			"value": "",
			"type": "string"
		}
	]
}