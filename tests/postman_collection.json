{
	"info": {
		"_postman_id": "c7015771-7a47-434d-9842-18288290efe0",
		"name": "Rest API tests",
		"description": "A collection of REST API tests for the backend.\n\nBe aware that the tests need to be run in order, so always run the User requests -folders before creating friendships, for example.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34213706"
	},
	"item": [
		{
			"name": "Add users",
			"item": [
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"No users created yet\", () => {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).that.is.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User without password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a password field with error message\", function () {\r",
									"    pm.response.to.have.status(400); // Verify status code\r",
									"    pm.response.to.be.json; // Verify response is in JSON format\r",
									"    pm.response.to.have.jsonBody({\r",
									"        password: [\"This field is required.\"]\r",
									"    }); // Verify response body\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "csrftoken=9OSujFL3qF1bONOhNc45xOMyleF2NMJa; sessionid=g6d7igegkdgnjo0gfu2cn6z6af4bw9o4",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"tester100\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New user without username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a password field with error message\", function () {\r",
									"    pm.response.to.have.status(400); // Verify status code\r",
									"    pm.response.to.be.json; // Verify response is in JSON format\r",
									"    pm.response.to.have.jsonBody({\r",
									"        password: [\"This field is required.\"]\r",
									"    }); // Verify response body\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var userId = responseBody.id;\r",
									"pm.environment.set(\"id_1\", userId);\r",
									"pm.test(\"Response contains a User with username as 'tester...'\", function () {\r",
									"    pm.expect(responseBody).to.have.property('username').that.is.equal(pm.environment.get('username_1'));\r",
									"});\r",
									"\r",
									"// Post-Request Script\r",
									"// Get the response cookies\r",
									"const cookies = pm.cookies;\r",
									"\r",
									"// Assuming the cookie name is 'session_id'\r",
									"if (cookies.has('session_id')) {\r",
									"    // Save the cookie value to an environment variable\r",
									"    pm.environment.set('sessionid_1', cookies.get('session_id'));\r",
									"}\r",
									"\r",
									"// Assuming the cookie name is 'csrftoken'\r",
									"if (cookies.has('csrftoken')) {\r",
									"    // Save the cookie value to an environment variable\r",
									"    pm.environment.set('csrftoken_1', cookies.get('csrftoken'));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random string or timestamp\r",
									"const randomString = Math.random().toString(36).substring(2, 8);\r",
									"const timestamp = new Date().getTime().toString().substring(7);\r",
									"\r",
									"// Prepend 'tester' to the random string or timestamp\r",
									"const dynamicValue = 'tester' + randomString; // or 'tester' + timestamp\r",
									"\r",
									"// Set the environment variable\r",
									"pm.environment.set(\"username_1\", dynamicValue);\r",
									"pm.environment.set(\"password_1\", dynamicValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username_1}}\",\r\n    \"password\" : \"{{password_1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var userId = responseBody.id;\r",
									"pm.environment.set(\"id_2\", userId);\r",
									"pm.test(\"Response contains a User with username as 'tester...'\", function () {\r",
									"    pm.expect(responseBody).to.have.property('username').that.is.equal(pm.environment.get('username_2'));\r",
									"});\r",
									"\r",
									"// Post-Request Script\r",
									"// Get the response cookies\r",
									"const cookies = pm.cookies;\r",
									"\r",
									"// Assuming the cookie name is 'session_id'\r",
									"if (cookies.has('session_id')) {\r",
									"    // Save the cookie value to an environment variable\r",
									"    pm.environment.set('sessionid_2', cookies.get('session_id'));\r",
									"}\r",
									"\r",
									"// Assuming the cookie name is 'csrftoken'\r",
									"if (cookies.has('csrftoken')) {\r",
									"    // Save the cookie value to an environment variable\r",
									"    pm.environment.set('csrftoken_2', cookies.get('csrftoken'));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random string or timestamp\r",
									"const randomString = Math.random().toString(36).substring(2, 8);\r",
									"const timestamp = new Date().getTime().toString().substring(7);\r",
									"\r",
									"// Prepend 'tester' to the random string or timestamp\r",
									"const dynamicValue = 'tester' + randomString; // or 'tester' + timestamp\r",
									"\r",
									"// Set the environment variable\r",
									"pm.environment.set(\"username_2\", dynamicValue);\r",
									"pm.environment.set(\"password_2\", dynamicValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username_2}}\",\r\n    \"password\" : \"{{password_2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New user 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var userId = responseBody.id;\r",
									"pm.environment.set(\"id_3\", userId);\r",
									"pm.test(\"Response contains a User with username as 'tester...'\", function () {\r",
									"    pm.expect(responseBody).to.have.property('username').that.is.equal(pm.environment.get('username_3'));\r",
									"});\r",
									"\r",
									"// Post-Request Script\r",
									"// Get the response cookies\r",
									"const cookies = pm.cookies;\r",
									"\r",
									"// Assuming the cookie name is 'session_id'\r",
									"if (cookies.has('session_id')) {\r",
									"    // Save the cookie value to an environment variable\r",
									"    pm.environment.set('sessionid_3', cookies.get('session_id'));\r",
									"}\r",
									"\r",
									"// Assuming the cookie name is 'csrftoken'\r",
									"if (cookies.has('csrftoken')) {\r",
									"    // Save the cookie value to an environment variable\r",
									"    pm.environment.set('csrftoken_3', cookies.get('csrftoken'));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random string or timestamp\r",
									"const randomString = Math.random().toString(36).substring(2, 8);\r",
									"const timestamp = new Date().getTime().toString().substring(7);\r",
									"\r",
									"// Prepend 'tester' to the random string or timestamp\r",
									"const dynamicValue = 'tester' + randomString; // or 'tester' + timestamp\r",
									"\r",
									"// Set the environment variable\r",
									"pm.environment.set(\"username_3\", dynamicValue);\r",
									"pm.environment.set(\"password_3\", dynamicValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username_3}}\",\r\n    \"password\" : \"{{password_3}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New user 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var userId = responseBody.id;\r",
									"pm.environment.set(\"id_4\", userId);\r",
									"pm.test(\"Response contains a User with username as 'tester...'\", function () {\r",
									"    pm.expect(responseBody).to.have.property('username').that.is.equal(pm.environment.get('username_4'));\r",
									"});\r",
									"\r",
									"// Post-Request Script\r",
									"// Get the response cookies\r",
									"const cookies = pm.cookies;\r",
									"\r",
									"// Assuming the cookie name is 'session_id'\r",
									"if (cookies.has('session_id')) {\r",
									"    // Save the cookie value to an environment variable\r",
									"    pm.environment.set('sessionid_4', cookies.get('session_id'));\r",
									"}\r",
									"\r",
									"// Assuming the cookie name is 'csrftoken'\r",
									"if (cookies.has('csrftoken')) {\r",
									"    // Save the cookie value to an environment variable\r",
									"    pm.environment.set('csrftoken_4', cookies.get('csrftoken'));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random string or timestamp\r",
									"const randomString = Math.random().toString(36).substring(2, 8);\r",
									"const timestamp = new Date().getTime().toString().substring(7);\r",
									"\r",
									"// Prepend 'tester' to the random string or timestamp\r",
									"const dynamicValue = 'tester' + randomString; // or 'tester' + timestamp\r",
									"\r",
									"// Set the environment variable\r",
									"pm.environment.set(\"username_4\", dynamicValue);\r",
									"pm.environment.set(\"password_4\", dynamicValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username_4}}\",\r\n    \"password\" : \"{{password_4}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New user with same name (invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql('{\"username\":[\"user with this username already exists.\"]}');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username_1}}\",\r\n    \"password\" : \"{{password_1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New user 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var userId = responseBody.id;\r",
									"pm.environment.set(\"id_6\", userId);\r",
									"pm.test(\"Response contains a User with username as 'tester...'\", function () {\r",
									"    pm.expect(responseBody).to.have.property('username').that.is.equal(pm.environment.get('username_6'));\r",
									"});\r",
									"\r",
									"// Post-Request Script\r",
									"// Get the response cookies\r",
									"const cookies = pm.cookies;\r",
									"\r",
									"// Assuming the cookie name is 'session_id'\r",
									"if (cookies.has('session_id')) {\r",
									"    // Save the cookie value to an environment variable\r",
									"    pm.environment.set('sessionid_6', cookies.get('session_id'));\r",
									"}\r",
									"\r",
									"// Assuming the cookie name is 'csrftoken'\r",
									"if (cookies.has('csrftoken')) {\r",
									"    // Save the cookie value to an environment variable\r",
									"    pm.environment.set('csrftoken_6', cookies.get('csrftoken'));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random string or timestamp\r",
									"const randomString = Math.random().toString(36).substring(2, 8);\r",
									"const timestamp = new Date().getTime().toString().substring(7);\r",
									"\r",
									"// Prepend 'tester' to the random string or timestamp\r",
									"const dynamicValue = 'tester' + randomString; // or 'tester' + timestamp\r",
									"\r",
									"// Set the environment variable\r",
									"pm.environment.set(\"username_6\", dynamicValue);\r",
									"pm.environment.set(\"password_6\", dynamicValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username_6}}\",\r\n    \"password\" : \"{{password_6}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.expect(pm.response.code).to.equal(202);",
									"});",
									"",
									"// Test to check if the response contains the 'csrftoken' and 'sessionid' cookies",
									"pm.test(\"Response contains 'csrftoken' and 'sessionid' cookies\", function() {",
									"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
									"    var setCookieHeaders = pm.response.headers.all().filter(header => header.key === 'Set-Cookie');",
									"    var cookieValues = setCookieHeaders.map(header => header.value);",
									"    pm.expect(cookieValues.join()).to.include('csrftoken').and.to.include('sessionid');",
									"});",
									"",
									"// Extract the CSRF token from cookies",
									"var xsrfCookie = pm.cookies.get(\"csrftoken\");",
									"pm.environment.set(\"csrftoken_6\", xsrfCookie);",
									"",
									"// Extract the session ID from cookies",
									"var sessionIdCookie = pm.cookies.get(\"sessionid\");",
									"pm.environment.set(\"sessionid_6\", sessionIdCookie);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_6}}\",\n    \"password\": \"{{password_6}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user 6",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_6');\r",
									"const csrftoken = pm.environment.get('csrftoken_6');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/users/{{id_6}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"{{id_6}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'users' property with a list of JSON objects\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).that.is.an('array');\r",
									"    // Check if each object in the 'users' array has at least one element\r",
									"    responseBody.forEach(function(user) {\r",
									"        pm.expect(Object.keys(user).length).to.be.at.least(1);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"djaguschiii\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is an object with id, username and is_online properties\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('id', 'username', 'is_online', 'friendship');",
									"});",
									"pm.test(\"Response body has id matching the environment variable\", function () {",
									"    var responseBody = pm.response.json();",
									"    var expectedId = pm.environment.get('id_1');",
									"    pm.expect(responseBody.id).to.eql(parseInt(expectedId));",
									"    var expectedUserName = pm.environment.get('username_1');",
									"    pm.expect(responseBody.username).to.eql(expectedUserName);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"djaguschiii\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/{{id_1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"{{id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var expectedUsername = pm.environment.get('adminUsername');",
									"var responseBody = pm.response.json();",
									"pm.test(\"Response contains a User with username as 'admin...'\", function () {",
									"    pm.expect(responseBody).to.have.property('username').that.is.equal(expectedUsername);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomString = Math.random().toString(36).substring(2, 8);\r",
									"const timestamp = new Date().getTime().toString().substring(7);\r",
									"\r",
									"// Prepend 'tester' to the random string or timestamp\r",
									"const dynamicValue = 'admin' + randomString; // or 'tester' + timestamp\r",
									"\r",
									"// Set the environment variable\r",
									"pm.environment.set(\"adminUsername\", dynamicValue);\r",
									"\r",
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_1');\r",
									"const csrftoken = pm.environment.get('csrftoken_1');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/admins/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"admins",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder is a collection of requests with tests for the backend's User application.  \n  \nBe aware that the tests have to be run at the start of the program because if you make your own changes to the backend database it will cause issues for some of the tests!"
		},
		{
			"name": "Add user for debugging",
			"item": [
				{
					"name": "New user 5 (user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"if (responseBody.hasOwnProperty('id'))\r",
									"{\r",
									"    var userId = responseBody.id;\r",
									"    pm.environment.set(\"id_5\", userId);\r",
									"\r",
									"    // Post-Request Script\r",
									"    // Get the response cookies\r",
									"    const cookies = pm.cookies;\r",
									"\r",
									"    // Assuming the cookie name is 'session_id'\r",
									"    if (cookies.has('session_id')) {\r",
									"        // Save the cookie value to an environment variable\r",
									"        pm.environment.set('sessionid_5', cookies.get('session_id'));\r",
									"    }\r",
									"\r",
									"    // Assuming the cookie name is 'csrftoken'\r",
									"    if (cookies.has('csrftoken')) {\r",
									"        // Save the cookie value to an environment variable\r",
									"        pm.environment.set('csrftoken_5', cookies.get('csrftoken'));\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the environment variable\r",
									"pm.environment.set(\"username_5\", \"user\");\r",
									"pm.environment.set(\"password_5\", \"password\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username_5}}\",\r\n    \"password\" : \"{{password_5}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login User 1 and add data",
			"item": [
				{
					"name": "Invalid login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Body contains the message 'Invalid username or password'\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.equal(\"Invalid username or password\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_1}}\",\n    \"password\": \"invalidpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.expect(pm.response.code).to.equal(202);",
									"});",
									"",
									"// Test to check if the response contains the 'csrftoken' and 'sessionid' cookies",
									"pm.test(\"Response contains 'csrftoken' and 'sessionid' cookies\", function() {",
									"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
									"    var setCookieHeaders = pm.response.headers.all().filter(header => header.key === 'Set-Cookie');",
									"    var cookieValues = setCookieHeaders.map(header => header.value);",
									"    pm.expect(cookieValues.join()).to.include('csrftoken').and.to.include('sessionid');",
									"});",
									"",
									"// Extract the CSRF token from cookies",
									"var xsrfCookie = pm.cookies.get(\"csrftoken\");",
									"pm.environment.set(\"csrftoken_1\", xsrfCookie);",
									"",
									"// Extract the session ID from cookies",
									"var sessionIdCookie = pm.cookies.get(\"sessionid\");",
									"pm.environment.set(\"sessionid_1\", sessionIdCookie);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_1}}\",\n    \"password\": \"{{password_1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check the response status code",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var responseJSON = pm.response.json();",
									"pm.environment.set(\"username_1\", responseJSON.username);",
									"var expectedUserName = pm.environment.get(\"username_1\");",
									"var expectedId = pm.environment.get(\"id_1\");",
									"",
									"// Test to check the response body structure and values",
									"pm.test(\"Response body matches the current values\", function () {",
									"  pm.expect(responseJSON).to.deep.include({ id: expectedId, username: expectedUserName, is_online: true });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_1');\r",
									"const csrftoken = pm.environment.get('csrftoken_1');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_1}}{{id_1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/{{id_1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"{{id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 1 & 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_1');\r",
									"const csrftoken = pm.environment.get('csrftoken_1');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_2}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 1 & 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_1');\r",
									"const csrftoken = pm.environment.get('csrftoken_1');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_3}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 1 & 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_1');\r",
									"const csrftoken = pm.environment.get('csrftoken_1');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_4}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 1 & 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_1');\r",
									"const csrftoken = pm.environment.get('csrftoken_1');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_5}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_1');\r",
									"const csrftoken = pm.environment.get('csrftoken_1');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logout/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logout",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login User 2 and add data",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.expect(pm.response.code).to.equal(202);",
									"});",
									"",
									"// Test to check if the response contains the 'csrftoken' and 'sessionid' cookies",
									"pm.test(\"Response contains 'csrftoken' and 'sessionid' cookies\", function() {",
									"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
									"    var setCookieHeaders = pm.response.headers.all().filter(header => header.key === 'Set-Cookie');",
									"    var cookieValues = setCookieHeaders.map(header => header.value);",
									"    pm.expect(cookieValues.join()).to.include('csrftoken').and.to.include('sessionid');",
									"});",
									"",
									"// Extract the CSRF token from cookies",
									"var xsrfCookie = pm.cookies.get(\"csrftoken\");",
									"pm.environment.set(\"csrftoken_2\", xsrfCookie);",
									"",
									"// Extract the session ID from cookies",
									"var sessionIdCookie = pm.cookies.get(\"sessionid\");",
									"pm.environment.set(\"sessionid_2\", sessionIdCookie);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_2}}\",\n    \"password\": \"{{password_2}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 2 & 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_2');\r",
									"const csrftoken = pm.environment.get('csrftoken_2');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 2 & 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_2');\r",
									"const csrftoken = pm.environment.get('csrftoken_2');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_3}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 2 & 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_2');\r",
									"const csrftoken = pm.environment.get('csrftoken_2');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_4}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 2 & 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_2');\r",
									"const csrftoken = pm.environment.get('csrftoken_2');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_5}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_2');\r",
									"const csrftoken = pm.environment.get('csrftoken_2');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logout/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logout",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login User 3 and add data",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.expect(pm.response.code).to.equal(202);",
									"});",
									"",
									"// Test to check if the response contains the 'csrftoken' and 'sessionid' cookies",
									"pm.test(\"Response contains 'csrftoken' and 'sessionid' cookies\", function() {",
									"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
									"    var setCookieHeaders = pm.response.headers.all().filter(header => header.key === 'Set-Cookie');",
									"    var cookieValues = setCookieHeaders.map(header => header.value);",
									"    pm.expect(cookieValues.join()).to.include('csrftoken').and.to.include('sessionid');",
									"});",
									"",
									"// Extract the CSRF token from cookies",
									"var xsrfCookie = pm.cookies.get(\"csrftoken\");",
									"pm.environment.set(\"csrftoken_3\", xsrfCookie);",
									"",
									"// Extract the session ID from cookies",
									"var sessionIdCookie = pm.cookies.get(\"sessionid\");",
									"pm.environment.set(\"sessionid_3\", sessionIdCookie);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_3}}\",\n    \"password\": \"{{password_3}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 3 & 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_3');\r",
									"const csrftoken = pm.environment.get('csrftoken_3');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_2}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 3 & 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_3');\r",
									"const csrftoken = pm.environment.get('csrftoken_3');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 3 & 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_3');\r",
									"const csrftoken = pm.environment.get('csrftoken_3');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_4}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 3 & 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_3');\r",
									"const csrftoken = pm.environment.get('csrftoken_3');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_5}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_3');\r",
									"const csrftoken = pm.environment.get('csrftoken_3');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logout/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logout",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login User 4 and add data",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.expect(pm.response.code).to.equal(202);",
									"});",
									"",
									"// Test to check if the response contains the 'csrftoken' and 'sessionid' cookies",
									"pm.test(\"Response contains 'csrftoken' and 'sessionid' cookies\", function() {",
									"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
									"    var setCookieHeaders = pm.response.headers.all().filter(header => header.key === 'Set-Cookie');",
									"    var cookieValues = setCookieHeaders.map(header => header.value);",
									"    pm.expect(cookieValues.join()).to.include('csrftoken').and.to.include('sessionid');",
									"});",
									"",
									"// Extract the CSRF token from cookies",
									"var xsrfCookie = pm.cookies.get(\"csrftoken\");",
									"pm.environment.set(\"csrftoken_4\", xsrfCookie);",
									"",
									"// Extract the session ID from cookies",
									"var sessionIdCookie = pm.cookies.get(\"sessionid\");",
									"pm.environment.set(\"sessionid_4\", sessionIdCookie);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_4}}\",\n    \"password\": \"{{password_4}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 4 & 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_4');\r",
									"const csrftoken = pm.environment.get('csrftoken_4');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_2}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 4 & 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_4');\r",
									"const csrftoken = pm.environment.get('csrftoken_4');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 4 & 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_4');\r",
									"const csrftoken = pm.environment.get('csrftoken_4');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_3}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 4 & 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_4');\r",
									"const csrftoken = pm.environment.get('csrftoken_4');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_5}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove friend request - 4 & 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_4');\r",
									"const csrftoken = pm.environment.get('csrftoken_4');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/friends/{{id_5}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								"{{id_5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_4');\r",
									"const csrftoken = pm.environment.get('csrftoken_4');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logout/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logout",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login User 5 and add data",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.expect(pm.response.code).to.equal(202);",
									"});",
									"",
									"// Test to check if the response contains the 'csrftoken' and 'sessionid' cookies",
									"pm.test(\"Response contains 'csrftoken' and 'sessionid' cookies\", function() {",
									"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
									"    var setCookieHeaders = pm.response.headers.all().filter(header => header.key === 'Set-Cookie');",
									"    var cookieValues = setCookieHeaders.map(header => header.value);",
									"    pm.expect(cookieValues.join()).to.include('csrftoken').and.to.include('sessionid');",
									"});",
									"",
									"// Extract the CSRF token from cookies",
									"var xsrfCookie = pm.cookies.get(\"csrftoken\");",
									"pm.environment.set(\"csrftoken_5\", xsrfCookie);",
									"",
									"// Extract the session ID from cookies",
									"var sessionIdCookie = pm.cookies.get(\"sessionid\");",
									"pm.environment.set(\"sessionid_5\", sessionIdCookie);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_5}}\",\n    \"password\": \"{{password_5}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Non-Friends",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No non-friend users created yet\", () => {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).that.is.an('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_5');\r",
									"const csrftoken = pm.environment.get('csrftoken_5');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "{{csrftoken_2}}"
							},
							{
								"key": "sessionid",
								"value": "{{sessionid_2}}"
							}
						],
						"url": {
							"raw": "{{baseurl}}/friends/?friendship_status=not-friend",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							],
							"query": [
								{
									"key": "friendship_status",
									"value": "not-friend"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 5 & 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_5');\r",
									"const csrftoken = pm.environment.get('csrftoken_5');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_2}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Friends",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_5');\r",
									"const csrftoken = pm.environment.get('csrftoken_5');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/friends/?friendship_status=friend",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							],
							"query": [
								{
									"key": "friendship_status",
									"value": "friend"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New friend - 5 & 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_5');\r",
									"const csrftoken = pm.environment.get('csrftoken_5');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"friend_id\": {{id_4}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/friends/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Pending requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_5');\r",
									"const csrftoken = pm.environment.get('csrftoken_5');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/friends/?friendship_status=pending-received",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							],
							"query": [
								{
									"key": "friendship_status",
									"value": "pending-received"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Received requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_5');\r",
									"const csrftoken = pm.environment.get('csrftoken_5');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/friends/?friendship_status=pending-sent",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"friends",
								""
							],
							"query": [
								{
									"key": "friendship_status",
									"value": "pending-sent"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script\r",
									"// Get the cookie values from the environment variables\r",
									"const sessionId = pm.environment.get('sessionid_5');\r",
									"const csrftoken = pm.environment.get('csrftoken_5');\r",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;\r",
									"\r",
									"// Set the cookie for the request if it exists\r",
									"if (sessionId && csrftoken) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Cookie',\r",
									"        value: cookieValues\r",
									"    });\r",
									"    \r",
									"    // Also set the CSRF token in the headers\r",
									"    pm.request.headers.add({\r",
									"        key: 'X-CSRFToken',\r",
									"        value: csrftoken\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logout/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logout",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test matches",
			"item": [
				{
					"name": "Login User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.expect(pm.response.code).to.equal(202);",
									"});",
									"",
									"// Test to check if the response contains the 'csrftoken' and 'sessionid' cookies",
									"pm.test(\"Response contains 'csrftoken' and 'sessionid' cookies\", function() {",
									"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
									"    var setCookieHeaders = pm.response.headers.all().filter(header => header.key === 'Set-Cookie');",
									"    var cookieValues = setCookieHeaders.map(header => header.value);",
									"    pm.expect(cookieValues.join()).to.include('csrftoken').and.to.include('sessionid');",
									"});",
									"",
									"// Extract the CSRF token from cookies",
									"var xsrfCookie = pm.cookies.get(\"csrftoken\");",
									"pm.environment.set(\"csrftoken_1\", xsrfCookie);",
									"",
									"// Extract the session ID from cookies",
									"var sessionIdCookie = pm.cookies.get(\"sessionid\");",
									"pm.environment.set(\"sessionid_1\", sessionIdCookie);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_1}}\",\n    \"password\": \"{{password_1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get AI match token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script",
									"// Get the cookie values from the environment variables",
									"const sessionId = pm.environment.get('sessionid_1');",
									"const csrftoken = pm.environment.get('csrftoken_1');",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
									"",
									"// Set the cookie for the request if it exists",
									"if (sessionId && csrftoken) {",
									"    pm.request.headers.add({",
									"        key: 'Cookie',",
									"        value: cookieValues",
									"    });",
									"    ",
									"    // Also set the CSRF token in the headers",
									"    pm.request.headers.add({",
									"        key: 'X-CSRFToken',",
									"        value: csrftoken",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"// Updated test to check if the token field exists in the response body",
									"pm.test(\"Response has token field\", function() {",
									"    pm.expect(pm.response.json().token).to.exist;",
									"});",
									"",
									"// Store the value of the \"token\" field in the Test environment as the \"ai_match_token\" variable",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"ai_match_token\", jsonData.token.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_1}}\",\n    \"password\": \"{{password_1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/tokens/match/?ai_opponent=true",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"tokens",
								"match",
								""
							],
							"query": [
								{
									"key": "ai_opponent",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get AI match url (valid)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script",
									"// Get the cookie values from the environment variables",
									"const sessionId = pm.environment.get('sessionid_1');",
									"const csrftoken = pm.environment.get('csrftoken_1');",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
									"",
									"// Set the cookie for the request if it exists",
									"if (sessionId && csrftoken) {",
									"    pm.request.headers.add({",
									"        key: 'Cookie',",
									"        value: cookieValues",
									"    });",
									"    ",
									"    // Also set the CSRF token in the headers",
									"    pm.request.headers.add({",
									"        key: 'X-CSRFToken',",
									"        value: csrftoken",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/match/?token={{ai_match_token}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"match",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{ai_match_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get AI match url (invalid, already used to get URL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script",
									"// Get the cookie values from the environment variables",
									"const sessionId = pm.environment.get('sessionid_1');",
									"const csrftoken = pm.environment.get('csrftoken_1');",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
									"",
									"// Set the cookie for the request if it exists",
									"if (sessionId && csrftoken) {",
									"    pm.request.headers.add({",
									"        key: 'Cookie',",
									"        value: cookieValues",
									"    });",
									"    ",
									"    // Also set the CSRF token in the headers",
									"    pm.request.headers.add({",
									"        key: 'X-CSRFToken',",
									"        value: csrftoken",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/match/?token={{ai_match_token}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"match",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{ai_match_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get match token (User 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"// Updated test to check if the token field exists in the response body",
									"pm.test(\"Response has token field\", function() {",
									"    pm.expect(pm.response.json().token).to.exist;",
									"});",
									"",
									"// Store the value of the \"token\" field in the Test environment as the \"match_token\" variable",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"match_token\", jsonData.token.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script",
									"// Get the cookie values from the environment variables",
									"const sessionId = pm.environment.get('sessionid_1');",
									"const csrftoken = pm.environment.get('csrftoken_1');",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
									"",
									"// Set the cookie for the request if it exists",
									"if (sessionId && csrftoken) {",
									"    pm.request.headers.add({",
									"        key: 'Cookie',",
									"        value: cookieValues",
									"    });",
									"    ",
									"    // Also set the CSRF token in the headers",
									"    pm.request.headers.add({",
									"        key: 'X-CSRFToken',",
									"        value: csrftoken",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_2}}\",\n    \"password\": \"{{password_2}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/tokens/match/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"tokens",
								"match",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get match url (User 2, valid)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script",
									"// Get the cookie values from the environment variables",
									"const sessionId = pm.environment.get('sessionid_1');",
									"const csrftoken = pm.environment.get('csrftoken_1');",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
									"",
									"// Set the cookie for the request if it exists",
									"if (sessionId && csrftoken) {",
									"    pm.request.headers.add({",
									"        key: 'Cookie',",
									"        value: cookieValues",
									"    });",
									"    ",
									"    // Also set the CSRF token in the headers",
									"    pm.request.headers.add({",
									"        key: 'X-CSRFToken',",
									"        value: csrftoken",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/match/?token={{match_token}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"match",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{match_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get match token (User 3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"// Updated test to check if the token field exists in the response body",
									"pm.test(\"Response has token field\", function() {",
									"    pm.expect(pm.response.json().token).to.exist;",
									"});",
									"",
									"// Store the value of the \"token\" field in the Test environment as the \"match_token\" variable",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"match_token\", jsonData.token.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script",
									"// Get the cookie values from the environment variables",
									"const sessionId = pm.environment.get('sessionid_1');",
									"const csrftoken = pm.environment.get('csrftoken_1');",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
									"",
									"// Set the cookie for the request if it exists",
									"if (sessionId && csrftoken) {",
									"    pm.request.headers.add({",
									"        key: 'Cookie',",
									"        value: cookieValues",
									"    });",
									"    ",
									"    // Also set the CSRF token in the headers",
									"    pm.request.headers.add({",
									"        key: 'X-CSRFToken',",
									"        value: csrftoken",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_3}}\",\n    \"password\": \"{{password_3}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/tokens/match/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"tokens",
								"match",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "invalidate token (User 3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script",
									"// Get the cookie values from the environment variables",
									"const sessionId = pm.environment.get('sessionid_1');",
									"const csrftoken = pm.environment.get('csrftoken_1');",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
									"",
									"// Set the cookie for the request if it exists",
									"if (sessionId && csrftoken) {",
									"    pm.request.headers.add({",
									"        key: 'Cookie',",
									"        value: cookieValues",
									"    });",
									"    ",
									"    // Also set the CSRF token in the headers",
									"    pm.request.headers.add({",
									"        key: 'X-CSRFToken',",
									"        value: csrftoken",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{match_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/tokens/match/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"tokens",
								"match",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get match url (User 3, invalid token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-Request Script",
									"// Get the cookie values from the environment variables",
									"const sessionId = pm.environment.get('sessionid_1');",
									"const csrftoken = pm.environment.get('csrftoken_1');",
									"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
									"",
									"// Set the cookie for the request if it exists",
									"if (sessionId && csrftoken) {",
									"    pm.request.headers.add({",
									"        key: 'Cookie',",
									"        value: cookieValues",
									"    });",
									"    ",
									"    // Also set the CSRF token in the headers",
									"    pm.request.headers.add({",
									"        key: 'X-CSRFToken',",
									"        value: csrftoken",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/match/?token={{match_token}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"match",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{match_token}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Test backend's match views.  \nUsers 1, 2 and 3 are used in these tests."
		},
		{
			"name": "Test tournaments",
			"item": [
				{
					"name": "4 player tournaments",
					"item": [
						{
							"name": "Login User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 202\", function () {",
											"    pm.expect(pm.response.code).to.equal(202);",
											"});",
											"",
											"// Test to check if the response contains the 'csrftoken' and 'sessionid' cookies",
											"pm.test(\"Response contains 'csrftoken' and 'sessionid' cookies\", function() {",
											"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
											"    var setCookieHeaders = pm.response.headers.all().filter(header => header.key === 'Set-Cookie');",
											"    var cookieValues = setCookieHeaders.map(header => header.value);",
											"    pm.expect(cookieValues.join()).to.include('csrftoken').and.to.include('sessionid');",
											"});",
											"",
											"// Extract the CSRF token from cookies",
											"var xsrfCookie = pm.cookies.get(\"csrftoken\");",
											"pm.environment.set(\"csrftoken_1\", xsrfCookie);",
											"",
											"// Extract the session ID from cookies",
											"var sessionIdCookie = pm.cookies.get(\"sessionid\");",
											"pm.environment.set(\"sessionid_1\", sessionIdCookie);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username_1}}\",\n    \"password\": \"{{password_1}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "start tournament (invalid, no player_amount)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host_user_display_name\": \"tournament_host_user\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "start tournament (invalid, invalid player_amount)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"player_amount\": 3,\n    \"host_user_display_name\": \"tournament_host_user\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "start tournament (valid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"// Store the value of the \"tournament.id\" field in the Test environment as the \"tournament_id\" variable",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"tournament_id\", jsonData.tournament.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host_user_display_name\": \"tournament_host_user\",\n    \"player_amount\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "add User 2 to tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username_2}}\",\n    \"password\": \"{{password_2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/{{tournament_id}}/players/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										"{{tournament_id}}",
										"players",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "add User 3 to tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username_3}}\",\n    \"password\": \"{{password_3}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/{{tournament_id}}/players/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										"{{tournament_id}}",
										"players",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "add User 4 to tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"// Store the value of the \"tournament.id\" field in the Test environment as the \"tournament_id\" variable",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"tournament_player_id\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username_4}}\",\n    \"password\": \"{{password_4}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/{{tournament_id}}/players/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										"{{tournament_id}}",
										"players",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "remove User 4 from tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/{{tournament_id}}/players/{{tournament_player_id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										"{{tournament_id}}",
										"players",
										"{{tournament_player_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "start tournament (invalid, not enough players)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/{{tournament_id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										"{{tournament_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "add User 4 to tournament Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"// Store the value of the \"tournament.id\" field in the Test environment as the \"tournament_id\" variable",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"tournament_player_id\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username_4}}\",\n    \"password\": \"{{password_4}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/{{tournament_id}}/players/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										"{{tournament_id}}",
										"players",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "add User 5 to tournament (invalid, player limit))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username_5}}\",\n    \"password\": \"{{password_5}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/{{tournament_id}}/players/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										"{{tournament_id}}",
										"players",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "start tournament (valid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/{{tournament_id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										"{{tournament_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get tournament players",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/{{tournament_id}}/players/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										"{{tournament_id}}",
										"players",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get tournament matches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/{{tournament_id}}/players/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										"{{tournament_id}}",
										"players",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get next_match url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/{{tournament_id}}/matches/{{next_match}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										"{{tournament_id}}",
										"matches",
										"{{next_match}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "abort tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pre-Request Script",
											"// Get the cookie values from the environment variables",
											"const sessionId = pm.environment.get('sessionid_1');",
											"const csrftoken = pm.environment.get('csrftoken_1');",
											"const cookieValues = 'csrftoken=' + csrftoken + '; sessionid=' + sessionId;",
											"",
											"// Set the cookie for the request if it exists",
											"if (sessionId && csrftoken) {",
											"    pm.request.headers.add({",
											"        key: 'Cookie',",
											"        value: cookieValues",
											"    });",
											"    ",
											"    // Also set the CSRF token in the headers",
											"    pm.request.headers.add({",
											"        key: 'X-CSRFToken',",
											"        value: csrftoken",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/tournaments/{{tournament_id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"tournaments",
										"{{tournament_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Test backend's tournament views.\n\nUsers 1, 2, 3, 4 and 5 used in these tests."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseurl",
			"value": "localhost:8080",
			"type": "string"
		},
		{
			"key": "user1_csrftoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "user1_sessionid",
			"value": "",
			"type": "string"
		},
		{
			"key": "user3_csrftoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "user3_sessionid",
			"value": "",
			"type": "string"
		},
		{
			"key": "user4_csrftoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "user4_sessionid",
			"value": "",
			"type": "string"
		},
		{
			"key": "user123_csrftoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "user123_sessionid",
			"value": "",
			"type": "string"
		}
	]
}